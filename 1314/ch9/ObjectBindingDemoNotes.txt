ObjectBindingDemo was used in 12/13 - it is a simple demo of binding from Target to Source, shows that when you change the text box the object property changes. The model object doesn't need to implement INotifyPropertyChanged for this as the control is not updated by the object. Actually, the binding is set up as Two Way, but will not really work two way with the simple Employee class without INotifyPropertyChanged. The visualisation is not itself intended to show binding, even though it does use binding - it's just a way of looking at the object. Could be confusing, as the binding from Source to Target for the label works even though INotifyPropertyChanged is not implemented - presumably the text box change which triggers the property change also causes the label to re-bind? This example might be clearer if the visualisation is something not involving binding - maybe a pop-up which accesses the object properties.

ObjectBindingDemo_revised_4_13 changes this around to show a label bound to the Name property, i.e. observing the model object property. NOte the model object is an instance variable of the window class in this example. It only illustrates one-way binding, but does show how INotifyPropertyChanged works.

A better overall solution might be to show two-way properly with INotifyPropertyChanged - have text box bound, pop-up which shows current object properties (opened by SHOW OBJECT button) and a RESET OBJECT button which allows the object properties to be changed externally to the binding and the text box updating. This would match better to the binding diagram in the notes.

UPDATE - the 'better overall solution' is now implemented in ObjectBindingDemo_for_1314. This has a text box with two-way binding to the Name property of the data context (which is also an instance variable of the window class), with LostFocus rather than PropertyChanged as the UpdateSourceTrigger. Typing a new value in the text box and tabbing away updates the Name property on the data context object (target to source binding). The show button simply shows a message box which displays the current value of the Name property. The reset button programmatically changes the Name property - since INotifyPropertyChanged is implemented, the source to target binding works and the text box value changes  (doesn't work if interface is not implemented) . Optionally, the property change event is captured and a message box shown - this is not part of the binding but demonstrates at what points the property changes

FURTHER UPDATE - added Address property to show notification of changes to multiple properties